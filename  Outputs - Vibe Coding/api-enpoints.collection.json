{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "üîê Sistema de Autenticaci√≥n API",
		"description": "Collection completa para probar el sistema de autenticaci√≥n con JWT.\n\n## üöÄ Endpoints incluidos:\n- ‚úÖ Registro de usuario\n- ‚úÖ Login de usuario\n- ‚úÖ Obtener perfil (protegida)\n- ‚úÖ Verificar token (protegida)\n\n## üìã Instrucciones:\n1. Importa esta collection en Postman\n2. Configura la variable `baseUrl` en el entorno\n3. Ejecuta primero Register o Login\n4. El token se guardar√° autom√°ticamente\n5. Prueba las rutas protegidas\n\n## üîß Variables autom√°ticas:\n- `{{baseUrl}}` - URL base del servidor\n- `{{authToken}}` - Token JWT (se guarda autom√°ticamente)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üë§ Autenticaci√≥n",
			"item": [
				{
					"name": "üìù Registrar Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Guardar token autom√°ticamente si el registro es exitoso",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.token) {",
									"        pm.environment.set('authToken', jsonData.token);",
									"        pm.environment.set('userId', jsonData.user.id);",
									"        pm.environment.set('userEmail', jsonData.user.email);",
									"        pm.environment.set('userName', jsonData.user.name);",
									"        console.log('‚úÖ Token guardado autom√°ticamente');",
									"    }",
									"}",
									"",
									"// Test b√°sico de respuesta",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Juan P√©rez\",\n    \"email\": \"juan@email.com\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Registra un nuevo usuario en el sistema.\n\n### üìã Campos requeridos:\n- `name`: Nombre completo del usuario\n- `email`: Email √∫nico del usuario\n- `password`: Contrase√±a (m√≠nimo 6 caracteres)\n\n### ‚úÖ Respuesta exitosa:\n- Status: 201\n- Incluye token JWT\n- Informaci√≥n del usuario creado\n\n### ‚ùå Posibles errores:\n- 400: Campos faltantes o usuario ya existe\n- 500: Error interno del servidor"
					},
					"response": [
						{
							"name": "‚úÖ Registro Exitoso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Juan P√©rez\",\n    \"email\": \"juan@email.com\",\n    \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Usuario registrado exitosamente\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"user\": {\n        \"id\": \"1640995200000\",\n        \"name\": \"Juan P√©rez\",\n        \"email\": \"juan@email.com\"\n    }\n}"
						},
						{
							"name": "‚ùå Usuario Ya Existe",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Juan P√©rez\",\n    \"email\": \"juan@email.com\",\n    \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"El usuario ya existe\"\n}"
						}
					]
				},
				{
					"name": "üîë Iniciar Sesi√≥n",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Guardar token autom√°ticamente si el login es exitoso",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.token) {",
									"        pm.environment.set('authToken', jsonData.token);",
									"        pm.environment.set('userId', jsonData.user.id);",
									"        pm.environment.set('userEmail', jsonData.user.email);",
									"        pm.environment.set('userName', jsonData.user.name);",
									"        console.log('‚úÖ Login exitoso - Token guardado');",
									"    }",
									"}",
									"",
									"// Tests de respuesta",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Login successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"juan@email.com\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Inicia sesi√≥n con un usuario existente.\n\n### üìã Campos requeridos:\n- `email`: Email del usuario registrado\n- `password`: Contrase√±a del usuario\n\n### ‚úÖ Respuesta exitosa:\n- Status: 200\n- Token JWT v√°lido\n- Informaci√≥n del usuario\n\n### ‚ùå Posibles errores:\n- 400: Credenciales inv√°lidas\n- 500: Error interno del servidor"
					},
					"response": [
						{
							"name": "‚úÖ Login Exitoso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"juan@email.com\",\n    \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Inicio de sesi√≥n exitoso\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"user\": {\n        \"id\": \"1640995200000\",\n        \"name\": \"Juan P√©rez\",\n        \"email\": \"juan@email.com\"\n    }\n}"
						},
						{
							"name": "‚ùå Credenciales Inv√°lidas",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"juan@email.com\",\n    \"password\": \"wrongpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Credenciales inv√°lidas\"\n}"
						}
					]
				}
			],
			"description": "Endpoints p√∫blicos para registro e inicio de sesi√≥n de usuarios."
		},
		{
			"name": "üîí Rutas Protegidas",
			"item": [
				{
					"name": "üë§ Obtener Perfil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test de autenticaci√≥n",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile data received', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						},
						"description": "Obtiene la informaci√≥n del perfil del usuario autenticado.\n\n### üîë Autenticaci√≥n requerida:\n- Header: `Authorization: Bearer <token>`\n- El token se obtiene del login/registro\n\n### ‚úÖ Respuesta exitosa:\n- Status: 200\n- Informaci√≥n completa del usuario\n\n### ‚ùå Posibles errores:\n- 401: Token inv√°lido o faltante\n- 500: Error interno del servidor"
					},
					"response": [
						{
							"name": "‚úÖ Perfil Obtenido",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/auth/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"profile"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"user\": {\n        \"id\": \"1640995200000\",\n        \"email\": \"juan@email.com\",\n        \"name\": \"Juan P√©rez\"\n    }\n}"
						},
						{
							"name": "‚ùå Token Inv√°lido",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer invalid_token"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/auth/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"profile"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Token inv√°lido.\"\n}"
						}
					]
				},
				{
					"name": "‚úÖ Verificar Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test de verificaci√≥n de token",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Token is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('message', 'Token v√°lido');",
									"    pm.expect(jsonData).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"verify"
							]
						},
						"description": "Verifica si el token JWT es v√°lido y no ha expirado.\n\n### üîë Autenticaci√≥n requerida:\n- Header: `Authorization: Bearer <token>`\n\n### ‚úÖ Respuesta exitosa:\n- Status: 200\n- Confirmaci√≥n de token v√°lido\n- Informaci√≥n del usuario\n\n### ‚ùå Posibles errores:\n- 401: Token inv√°lido, expirado o faltante\n- 500: Error interno del servidor"
					},
					"response": [
						{
							"name": "‚úÖ Token V√°lido",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/auth/verify",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"verify"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Token v√°lido\",\n    \"user\": {\n        \"id\": \"1640995200000\",\n        \"email\": \"juan@email.com\",\n        \"name\": \"Juan P√©rez\"\n    }\n}"
						},
						{
							"name": "‚ùå Sin Token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/verify",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"verify"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Acceso denegado. Token requerido.\"\n}"
						}
					]
				}
			],
			"description": "Endpoints que requieren autenticaci√≥n JWT v√°lida.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "üß™ Tests Completos",
			"item": [
				{
					"name": "üöÄ Flujo Completo de Autenticaci√≥n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar email √∫nico para evitar conflictos",
									"const timestamp = Date.now();",
									"const randomEmail = `test${timestamp}@email.com`;",
									"pm.environment.set('testEmail', randomEmail);",
									"console.log('üìß Email de prueba:', randomEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Este es un ejemplo de test completo que puedes usar como referencia",
									"pm.test('El flujo completo de autenticaci√≥n funciona', function () {",
									"    // Aqu√≠ puedes agregar tests m√°s complejos",
									"    // que prueben m√∫ltiples endpoints en secuencia",
									"    pm.expect(true).to.be.true;",
									"});",
									"",
									"console.log('üéØ Para ejecutar el flujo completo:');",
									"console.log('1. Ejecuta \"Registrar Usuario\"');",
									"console.log('2. Luego \"Obtener Perfil\"');",
									"console.log('3. Finalmente \"Verificar Token\"');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"verify"
							]
						},
						"description": "Este endpoint sirve como ejemplo para tests complejos.\n\n### üß™ Para probar el flujo completo:\n1. Ejecuta el registro con email √∫nico\n2. Verifica que el token se guarde autom√°ticamente\n3. Prueba las rutas protegidas\n4. Confirma que todo funciona correctamente\n\n### üìù Scripts incluidos:\n- Pre-request: Genera emails √∫nicos\n- Tests: Validaciones autom√°ticas\n- Variables: Se guardan autom√°ticamente"
					},
					"response": []
				}
			],
			"description": "Tests automatizados y flujos completos para validar toda la funcionalidad."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "global-prerequest",
				"type": "text/javascript",
				"exec": [
					"// Script global que se ejecuta antes de cada request",
					"console.log('üöÄ Ejecutando request a:', pm.request.url);",
					"",
					"// Verificar que baseUrl est√© configurada",
					"if (!pm.environment.get('baseUrl')) {",
					"    console.warn('‚ö†Ô∏è Variable baseUrl no configurada. Usando default.');",
					"    pm.environment.set('baseUrl', 'http://localhost:3000');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "global-test",
				"type": "text/javascript",
				"exec": [
					"// Script global que se ejecuta despu√©s de cada request",
					"console.log('‚úÖ Response status:', pm.response.status, pm.response.code);",
					"console.log('‚è±Ô∏è Response time:', pm.response.responseTime + 'ms');",
					"",
					"// Test global: verificar que el content-type sea JSON para APIs",
					"if (pm.request.url.toString().includes('/api/')) {",
					"    pm.test('Response is JSON', function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}",
					"",
					"// Test global: verificar tiempo de respuesta razonable",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}